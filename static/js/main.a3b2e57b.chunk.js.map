{"version":3,"sources":["components/common/commonStyled.tsx","components/common/Spinner.tsx","containers/app/App.tsx","effects/config.ts","containers/configWrapper/ConfigWrapper.tsx","serviceWorker.ts","index.tsx"],"names":["StyledSpinner","SpinnerDiv","styled","div","BackgroundDiv","TextDiv","Spinner","text","transparent","className","Fuq","React","Admin","PageNotFound","App","fallback","exact","path","component","configUpdate","createEvent","ConfigWrapper","children","useQuery","axios","get","then","res","data","config","isSuccess","isLoading","locale","navigator","language","useEffect","console","log","messages","defaultLocale","Boolean","window","location","hostname","match","ReactDOM","render","queries","refetchOnWindowFocus","retry","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0zBAEO,IAAMA,EAAgB,CAC3BC,WAAYC,IAAOC,IAAT,KAQVC,cAAeF,IAAOC,IAAT,KASbE,QAASH,IAAOC,IAAT,MCSMG,EArByB,SAAC,GAGlC,IAAD,IAFJC,YAEI,MAFG,GAEH,IADJC,YAEA,OACE,gCACE,gBAAC,EAAEJ,cAAH,MACA,gBAAC,EAAEH,WAAH,KACE,2BACE,qBAAGQ,UAAU,+BAEdF,GACC,gBAAC,EAAEF,QAAH,KACE,0BAAKE,OCjBXG,EAAMC,QAAW,kBAAM,sDACvBC,EAAQD,QAAW,kBAAM,sDACzBE,EAAeF,QAAW,kBAAM,sDAkBvBG,EAhBO,WACpB,OAEE,gBAAC,WAAD,CAAgBC,SAAU,gBAAC,EAAD,OACxB,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,iCACvC,gBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,WAAWC,UAAWR,IACxC,gBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,UAAUC,UAAWN,IACvC,gBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWL,Q,iCCfrCM,EAAeC,YAAoB,iBC0B1BC,EApBO,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,SAAgD,EAExBC,YAAS,eAAe,kBACrEC,IAAMC,IAAI,gBAAgBC,MAAK,SAACC,GAAD,OAASA,EAAIC,WADhCC,EAFyD,EAE/DD,KAAcE,EAFiD,EAEjDA,UAAWC,EAFsC,EAEtCA,UAG3BC,EAASC,UAAUC,SAOzB,OALAC,qBAAU,WACRC,QAAQC,IAAI,cAAeR,GAC3BC,GAAaX,EAAaU,KACzB,CAACC,EAAWD,IAGb,kBAAC,IAAD,CAAcS,SAAU,GAAIN,OAAQA,EAAQO,cAAc,MACvDR,GAAa,uBAAGtB,UAAU,2BAC1BqB,GAAa,6BAAMR,KCXNkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCENC,IAASC,OACP,kBAAC,IAAD,CAA0BjB,OAAQ,CAAEkB,QANtB,CACdC,sBAAsB,EACtBC,OAAO,KAKL,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,qBAAD,QAGJC,SAASC,eAAe,SDgHpB,kBAAmBlB,WACrBA,UAAUmB,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.a3b2e57b.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const StyledSpinner = {\n  SpinnerDiv: styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    z-index: 1000;\n    margin: -50px 0px 0px -50px;\n    max-width: 140px;\n  `,\n  BackgroundDiv: styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 999;\n    background-color: rgb(255, 255, 255);\n  `,\n  TextDiv: styled.div`\n    text-align: center;\n    margin-top: 1rem;\n  `,\n};\n","import * as React from 'react';\nimport { StyledSpinner as s } from './commonStyled';\n\nexport interface SpinnerProps {\n  text?: string;\n  transparent?: boolean;\n}\n\nconst Spinner: React.FC<SpinnerProps> = ({\n  text = '',\n  transparent = false, // TODO: implement this stuff\n}) => {\n  return (\n    <>\n      <s.BackgroundDiv />\n      <s.SpinnerDiv>\n        <div>\n          <i className='fas fa-10x fa-spin fa-cog' />\n        </div>\n        {text && (\n          <s.TextDiv>\n            <h3>{text}</h3>\n          </s.TextDiv>\n        )}\n      </s.SpinnerDiv>\n    </>\n  );\n};\n\nexport default Spinner;\n","import * as React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Spinner from 'components/common/Spinner';\n\nconst Fuq = React.lazy(() => import('containers/fuq/Fuq'));\nconst Admin = React.lazy(() => import('containers/admin/Admin'));\nconst PageNotFound = React.lazy(() => import('containers/404/404'));\n\nconst App: React.FC = () => {\n  return (\n    // TODO: implement transition spinner\n    <React.Suspense fallback={<Spinner />}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={() => <b>/</b>} />\n          <Route exact path='/fuq/:id' component={Fuq} />\n          <Route exact path='/badmin' component={Admin} />\n          <Route exact path='*' component={PageNotFound} />\n        </Switch>\n      </BrowserRouter>\n    </React.Suspense>\n  );\n};\n\nexport default App;\n","import { createEvent } from 'effector';\n\nconst configUpdate = createEvent<Object>('update config');\n\nexport {\n  configUpdate\n};","import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { useQuery } from 'react-query';\nimport { IntlProvider } from 'react-intl';\n\nimport { ConfigWrapperProps } from './configWrapperTypes';\nimport { configUpdate } from 'effects/config';\n\nconst ConfigWrapper = ({ children }: ConfigWrapperProps): JSX.Element => {\n  ///config.json\n  const { data: config, isSuccess, isLoading } = useQuery('fetchConfig', () =>\n    axios.get('/config.json').then((res) => res.data)\n  );\n  const locale = navigator.language;\n\n  useEffect(() => {\n    console.log('CONFIG :>> ', config);\n    isSuccess && configUpdate(config);\n  }, [isSuccess, config]);\n\n  return (\n    <IntlProvider messages={{}} locale={locale} defaultLocale='ru'>\n      {isLoading && <i className='fab fa-accessible-icon' />}\n      {isSuccess && <div>{children}</div>}\n    </IntlProvider>\n  );\n};\n\nexport default ConfigWrapper;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ReactQueryConfigProvider } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query-devtools';\n\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport 'antd/dist/antd.css'\nimport './index.css';\n\n\nimport App from 'containers/app/App';\nimport ConfigWrapper from 'containers/configWrapper/ConfigWrapper';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst queries = {\n  refetchOnWindowFocus: false,\n  retry: false\n};\n\nReactDOM.render(\n  <ReactQueryConfigProvider config={{ queries }}>\n    <ConfigWrapper>\n      <App />\n      <ReactQueryDevtools />\n    </ConfigWrapper>\n  </ReactQueryConfigProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}